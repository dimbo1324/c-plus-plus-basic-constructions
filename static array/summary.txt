---------------------------------------
---------------------------------------
I Фиксированные массивы, фиксированные массивы и циклы
---------------------------------------
---------------------------------------

---------------------------------------
1. Безопасная инициализация
---------------------------------------
1.1 Uniform initialization {} защищает от сужения и автоматически заполняет нулями.
1.2 std::to_array (C++20) создаёт std::array с известной длиной.

---------------------------------------
2. Определение длины
---------------------------------------
2.1 std::size(arr) или arr.size() (std::array) вместо «магических» чисел.
2.2 При «сырых» массивах: sizeof(arr)/sizeof(arr[0]) — только в той же области видимости.

---------------------------------------
3. Читаемые индексы через enum
---------------------------------------
3.1 namespace Students { enum Names { SMITH, …, MAX_STUDENTS }; }
3.2 Доступ: scores[Students::JOHN] → понятно, кто где.

---------------------------------------
4. Безопасная передача в функции
---------------------------------------
4.1 Сырой массив → указатель (побочные эффекты).
4.2 Используйте const T arr[] или std::span<const T> (C++20) для защиты от модификации.

---------------------------------------
5. Итерация и алгоритмы
---------------------------------------
5.1 Ручной for(size_t i = 0; i < arr.size(); ++i) с гарантией без off-by-one.
5.2 Диапазоны (<ranges>) и <algorithm> для std::ranges::max_element, std::accumulate и т.п.

---------------------------------------
---------------------------------------
II Лучшие практики (C++20+)
---------------------------------------
---------------------------------------
main_1.cpp - main_5.cpp


---------------------------------------
---------------------------------------
III Базовые конструкции и примеры
---------------------------------------
---------------------------------------
main_6.cpp
